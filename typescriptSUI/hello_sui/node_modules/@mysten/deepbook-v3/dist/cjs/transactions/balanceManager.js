"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var balanceManager_exports = {};
__export(balanceManager_exports, {
  BalanceManagerContract: () => BalanceManagerContract
});
module.exports = __toCommonJS(balanceManager_exports);
var import_transactions = require("@mysten/sui/transactions");
var _config;
class BalanceManagerContract {
  /**
   * @param {DeepBookConfig} config Configuration for BalanceManagerContract
   */
  constructor(config) {
    __privateAdd(this, _config);
    /**
     * @description Create and share a new BalanceManager
     * @returns A function that takes a Transaction object
     */
    this.createAndShareBalanceManager = () => (tx) => {
      const manager = tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::new`
      });
      tx.moveCall({
        target: "0x2::transfer::public_share_object",
        arguments: [manager],
        typeArguments: [`${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::BalanceManager`]
      });
    };
    /**
     * @description Deposit funds into the BalanceManager
     * @param {string} managerKey The key of the BalanceManager
     * @param {string} coinKey The key of the coin to deposit
     * @param {number} amountToDeposit The amount to deposit
     * @returns A function that takes a Transaction object
     */
    this.depositIntoManager = (managerKey, coinKey, amountToDeposit) => (tx) => {
      tx.setSenderIfNotSet(__privateGet(this, _config).address);
      const managerId = __privateGet(this, _config).getBalanceManager(managerKey).address;
      const coin = __privateGet(this, _config).getCoin(coinKey);
      const depositInput = Math.round(amountToDeposit * coin.scalar);
      const deposit = (0, import_transactions.coinWithBalance)({
        type: coin.type,
        balance: depositInput
      });
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::deposit`,
        arguments: [tx.object(managerId), deposit],
        typeArguments: [coin.type]
      });
    };
    /**
     * @description Withdraw funds from the BalanceManager
     * @param {string} managerKey The key of the BalanceManager
     * @param {string} coinKey The key of the coin to withdraw
     * @param {number} amountToWithdraw The amount to withdraw
     * @param {string} recipient The recipient of the withdrawn funds
     * @returns A function that takes a Transaction object
     */
    this.withdrawFromManager = (managerKey, coinKey, amountToWithdraw, recipient) => (tx) => {
      const managerId = __privateGet(this, _config).getBalanceManager(managerKey).address;
      const coin = __privateGet(this, _config).getCoin(coinKey);
      const withdrawInput = Math.round(amountToWithdraw * coin.scalar);
      const coinObject = tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::withdraw`,
        arguments: [tx.object(managerId), tx.pure.u64(withdrawInput)],
        typeArguments: [coin.type]
      });
      tx.transferObjects([coinObject], recipient);
    };
    /**
     * @description Withdraw all funds from the BalanceManager
     * @param {string} managerKey The key of the BalanceManager
     * @param {string} coinKey The key of the coin to withdraw
     * @param {string} recipient The recipient of the withdrawn funds
     * @returns A function that takes a Transaction object
     */
    this.withdrawAllFromManager = (managerKey, coinKey, recipient) => (tx) => {
      const managerId = __privateGet(this, _config).getBalanceManager(managerKey).address;
      const coin = __privateGet(this, _config).getCoin(coinKey);
      const withdrawalCoin = tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::withdraw_all`,
        arguments: [tx.object(managerId)],
        typeArguments: [coin.type]
      });
      tx.transferObjects([withdrawalCoin], recipient);
    };
    /**
     * @description Check the balance of the BalanceManager
     * @param {string} managerKey The key of the BalanceManager
     * @param {string} coinKey The key of the coin to check the balance of
     * @returns A function that takes a Transaction object
     */
    this.checkManagerBalance = (managerKey, coinKey) => (tx) => {
      const managerId = __privateGet(this, _config).getBalanceManager(managerKey).address;
      const coin = __privateGet(this, _config).getCoin(coinKey);
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::balance`,
        arguments: [tx.object(managerId)],
        typeArguments: [coin.type]
      });
    };
    /**
     * @description Generate a trade proof for the BalanceManager. Calls the appropriate function based on whether tradeCap is set.
     * @param {string} managerKey The key of the BalanceManager
     * @returns A function that takes a Transaction object
     */
    this.generateProof = (managerKey) => (tx) => {
      const balanceManager = __privateGet(this, _config).getBalanceManager(managerKey);
      return tx.add(
        balanceManager.tradeCap ? this.generateProofAsTrader(balanceManager.address, balanceManager.tradeCap) : this.generateProofAsOwner(balanceManager.address)
      );
    };
    /**
     * @description Generate a trade proof as the owner
     * @param {string} managerId The ID of the BalanceManager
     * @returns A function that takes a Transaction object
     */
    this.generateProofAsOwner = (managerId) => (tx) => {
      return tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::generate_proof_as_owner`,
        arguments: [tx.object(managerId)]
      });
    };
    /**
     * @description Generate a trade proof as a trader
     * @param {string} managerId The ID of the BalanceManager
     * @param {string} tradeCapId The ID of the tradeCap
     * @returns A function that takes a Transaction object
     */
    this.generateProofAsTrader = (managerId, tradeCapId) => (tx) => {
      return tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::generate_proof_as_trader`,
        arguments: [tx.object(managerId), tx.object(tradeCapId)]
      });
    };
    /**
     * @description Get the owner of the BalanceManager
     * @param {string} managerKey The key of the BalanceManager
     * @returns A function that takes a Transaction object
     */
    this.owner = (managerKey) => (tx) => {
      const managerId = __privateGet(this, _config).getBalanceManager(managerKey).address;
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::owner`,
        arguments: [tx.object(managerId)]
      });
    };
    /**
     * @description Get the ID of the BalanceManager
     * @param {string} managerKey The key of the BalanceManager
     * @returns A function that takes a Transaction object
     */
    this.id = (managerKey) => (tx) => {
      const managerId = __privateGet(this, _config).getBalanceManager(managerKey).address;
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::balance_manager::id`,
        arguments: [tx.object(managerId)]
      });
    };
    __privateSet(this, _config, config);
  }
}
_config = new WeakMap();
//# sourceMappingURL=balanceManager.js.map
