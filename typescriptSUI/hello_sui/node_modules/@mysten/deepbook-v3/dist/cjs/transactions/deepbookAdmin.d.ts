import type { Transaction } from '@mysten/sui/transactions';
import type { CreatePoolAdminParams } from '../types/index.js';
import type { DeepBookConfig } from '../utils/config.js';
/**
 * DeepBookAdminContract class for managing admin actions.
 */
export declare class DeepBookAdminContract {
    #private;
    /**
     * @param {DeepBookConfig} config Configuration for DeepBookAdminContract
     */
    constructor(config: DeepBookConfig);
    /**
     * @description Create a new pool as admin
     * @param {CreatePoolAdminParams} params Parameters for creating pool as admin
     * @returns A function that takes a Transaction object
     */
    createPoolAdmin: (params: CreatePoolAdminParams) => (tx: Transaction) => void;
    /**
     * @description Unregister a pool as admin
     * @param {string} poolKey The key of the pool to be unregistered by admin
     * @returns A function that takes a Transaction object
     */
    unregisterPoolAdmin: (poolKey: string) => (tx: Transaction) => void;
    /**
     * @description Update the allowed versions for a pool
     * @param {string} poolKey The key of the pool to be updated
     * @returns A function that takes a Transaction object
     */
    updateAllowedVersions: (poolKey: string) => (tx: Transaction) => void;
    /**
     * @description Enable a specific version
     * @param {number} version The version to be enabled
     * @returns A function that takes a Transaction object
     */
    enableVersion: (version: number) => (tx: Transaction) => void;
    /**
     * @description Disable a specific version
     * @param {number} version The version to be disabled
     * @returns A function that takes a Transaction object
     */
    disableVersion: (version: number) => (tx: Transaction) => void;
}
