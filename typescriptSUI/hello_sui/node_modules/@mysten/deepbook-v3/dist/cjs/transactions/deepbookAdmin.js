"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var deepbookAdmin_exports = {};
__export(deepbookAdmin_exports, {
  DeepBookAdminContract: () => DeepBookAdminContract
});
module.exports = __toCommonJS(deepbookAdmin_exports);
var import_transactions = require("@mysten/sui/transactions");
var import_config = require("../utils/config.js");
var _config, _DeepBookAdminContract_instances, adminCap_fn;
class DeepBookAdminContract {
  /**
   * @param {DeepBookConfig} config Configuration for DeepBookAdminContract
   */
  constructor(config) {
    __privateAdd(this, _DeepBookAdminContract_instances);
    __privateAdd(this, _config);
    /**
     * @description Create a new pool as admin
     * @param {CreatePoolAdminParams} params Parameters for creating pool as admin
     * @returns A function that takes a Transaction object
     */
    this.createPoolAdmin = (params) => (tx) => {
      tx.setSenderIfNotSet(__privateGet(this, _config).address);
      const { baseCoinKey, quoteCoinKey, tickSize, lotSize, minSize, whitelisted, stablePool } = params;
      const baseCoin = __privateGet(this, _config).getCoin(baseCoinKey);
      const quoteCoin = __privateGet(this, _config).getCoin(quoteCoinKey);
      const deepCoinType = __privateGet(this, _config).getCoin("DEEP").type;
      const creationFee = (0, import_transactions.coinWithBalance)({ type: deepCoinType, balance: import_config.POOL_CREATION_FEE });
      const baseScalar = baseCoin.scalar;
      const quoteScalar = quoteCoin.scalar;
      const adjustedTickSize = tickSize * import_config.FLOAT_SCALAR * quoteScalar / baseScalar;
      const adjustedLotSize = lotSize * baseScalar;
      const adjustedMinSize = minSize * baseScalar;
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::create_pool_admin`,
        arguments: [
          tx.object(__privateGet(this, _config).REGISTRY_ID),
          // registry_id
          tx.pure.u64(adjustedTickSize),
          // adjusted tick_size
          tx.pure.u64(adjustedLotSize),
          // adjusted lot_size
          tx.pure.u64(adjustedMinSize),
          // adjusted min_size
          creationFee,
          // 0x2::balance::Balance<0x2::sui::SUI>
          tx.pure.bool(whitelisted),
          tx.pure.bool(stablePool),
          tx.object(__privateMethod(this, _DeepBookAdminContract_instances, adminCap_fn).call(this))
        ],
        typeArguments: [baseCoin.type, quoteCoin.type]
      });
    };
    /**
     * @description Unregister a pool as admin
     * @param {string} poolKey The key of the pool to be unregistered by admin
     * @returns A function that takes a Transaction object
     */
    this.unregisterPoolAdmin = (poolKey) => (tx) => {
      const pool = __privateGet(this, _config).getPool(poolKey);
      const baseCoin = __privateGet(this, _config).getCoin(pool.baseCoin);
      const quoteCoin = __privateGet(this, _config).getCoin(pool.quoteCoin);
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::unregister_pool_admin`,
        arguments: [tx.object(__privateGet(this, _config).REGISTRY_ID), tx.object(__privateMethod(this, _DeepBookAdminContract_instances, adminCap_fn).call(this))],
        typeArguments: [baseCoin.type, quoteCoin.type]
      });
    };
    /**
     * @description Update the allowed versions for a pool
     * @param {string} poolKey The key of the pool to be updated
     * @returns A function that takes a Transaction object
     */
    this.updateAllowedVersions = (poolKey) => (tx) => {
      const pool = __privateGet(this, _config).getPool(poolKey);
      const baseCoin = __privateGet(this, _config).getCoin(pool.baseCoin);
      const quoteCoin = __privateGet(this, _config).getCoin(pool.quoteCoin);
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::update_allowed_versions`,
        arguments: [
          tx.object(pool.address),
          tx.object(__privateGet(this, _config).REGISTRY_ID),
          tx.object(__privateMethod(this, _DeepBookAdminContract_instances, adminCap_fn).call(this))
        ],
        typeArguments: [baseCoin.type, quoteCoin.type]
      });
    };
    /**
     * @description Enable a specific version
     * @param {number} version The version to be enabled
     * @returns A function that takes a Transaction object
     */
    this.enableVersion = (version) => (tx) => {
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::registry::enable_version`,
        arguments: [
          tx.object(__privateGet(this, _config).REGISTRY_ID),
          tx.pure.u64(version),
          tx.object(__privateMethod(this, _DeepBookAdminContract_instances, adminCap_fn).call(this))
        ]
      });
    };
    /**
     * @description Disable a specific version
     * @param {number} version The version to be disabled
     * @returns A function that takes a Transaction object
     */
    this.disableVersion = (version) => (tx) => {
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::registry::disable_version`,
        arguments: [
          tx.object(__privateGet(this, _config).REGISTRY_ID),
          tx.pure.u64(version),
          tx.object(__privateMethod(this, _DeepBookAdminContract_instances, adminCap_fn).call(this))
        ]
      });
    };
    __privateSet(this, _config, config);
  }
}
_config = new WeakMap();
_DeepBookAdminContract_instances = new WeakSet();
/**
 * @returns The admin capability required for admin operations
 * @throws Error if the admin capability is not set
 */
adminCap_fn = function() {
  const adminCap = __privateGet(this, _config).adminCap;
  if (!adminCap) {
    throw new Error("ADMIN_CAP environment variable not set");
  }
  return adminCap;
};
//# sourceMappingURL=deepbookAdmin.js.map
