var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _config;
import { DEEP_SCALAR, FLOAT_SCALAR } from "../utils/config.js";
class GovernanceContract {
  /**
   * @param {DeepBookConfig} config Configuration for GovernanceContract
   */
  constructor(config) {
    __privateAdd(this, _config);
    /**
     * @description Stake a specified amount in the pool
     * @param {string} poolKey The key to identify the pool
     * @param {string} balanceManagerKey The key to identify the BalanceManager
     * @param {number} stakeAmount The amount to stake
     * @returns A function that takes a Transaction object
     */
    this.stake = (poolKey, balanceManagerKey, stakeAmount) => (tx) => {
      const pool = __privateGet(this, _config).getPool(poolKey);
      const balanceManager = __privateGet(this, _config).getBalanceManager(balanceManagerKey);
      const tradeProof = tx.add(__privateGet(this, _config).balanceManager.generateProof(balanceManagerKey));
      const baseCoin = __privateGet(this, _config).getCoin(pool.baseCoin);
      const quoteCoin = __privateGet(this, _config).getCoin(pool.quoteCoin);
      const stakeInput = Math.round(stakeAmount * DEEP_SCALAR);
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::stake`,
        arguments: [
          tx.object(pool.address),
          tx.object(balanceManager.address),
          tradeProof,
          tx.pure.u64(stakeInput)
        ],
        typeArguments: [baseCoin.type, quoteCoin.type]
      });
    };
    /**
     * @description Unstake from the pool
     * @param {string} poolKey The key to identify the pool
     * @param {string} balanceManagerKey The key to identify the BalanceManager
     * @returns A function that takes a Transaction object
     */
    this.unstake = (poolKey, balanceManagerKey) => (tx) => {
      const pool = __privateGet(this, _config).getPool(poolKey);
      const balanceManager = __privateGet(this, _config).getBalanceManager(balanceManagerKey);
      const tradeProof = tx.add(__privateGet(this, _config).balanceManager.generateProof(balanceManagerKey));
      const baseCoin = __privateGet(this, _config).getCoin(pool.baseCoin);
      const quoteCoin = __privateGet(this, _config).getCoin(pool.quoteCoin);
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::unstake`,
        arguments: [tx.object(pool.address), tx.object(balanceManager.address), tradeProof],
        typeArguments: [baseCoin.type, quoteCoin.type]
      });
    };
    /**
     * @description Submit a governance proposal
     * @param {ProposalParams} params Parameters for the proposal
     * @returns A function that takes a Transaction object
     */
    this.submitProposal = (params) => (tx) => {
      const { poolKey, balanceManagerKey, takerFee, makerFee, stakeRequired } = params;
      const pool = __privateGet(this, _config).getPool(poolKey);
      const balanceManager = __privateGet(this, _config).getBalanceManager(balanceManagerKey);
      const tradeProof = tx.add(__privateGet(this, _config).balanceManager.generateProof(balanceManagerKey));
      const baseCoin = __privateGet(this, _config).getCoin(pool.baseCoin);
      const quoteCoin = __privateGet(this, _config).getCoin(pool.quoteCoin);
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::submit_proposal`,
        arguments: [
          tx.object(pool.address),
          tx.object(balanceManager.address),
          tradeProof,
          tx.pure.u64(Math.round(takerFee * FLOAT_SCALAR)),
          tx.pure.u64(Math.round(makerFee * FLOAT_SCALAR)),
          tx.pure.u64(Math.round(stakeRequired * DEEP_SCALAR))
        ],
        typeArguments: [baseCoin.type, quoteCoin.type]
      });
    };
    /**
     * @description Vote on a proposal
     * @param {string} poolKey The key to identify the pool
     * @param {string} balanceManagerKey The key to identify the BalanceManager
     * @param {string} proposal_id The ID of the proposal to vote on
     * @returns A function that takes a Transaction object
     */
    this.vote = (poolKey, balanceManagerKey, proposal_id) => (tx) => {
      const pool = __privateGet(this, _config).getPool(poolKey);
      const balanceManager = __privateGet(this, _config).getBalanceManager(balanceManagerKey);
      const tradeProof = tx.add(__privateGet(this, _config).balanceManager.generateProof(balanceManagerKey));
      tx.moveCall({
        target: `${__privateGet(this, _config).DEEPBOOK_PACKAGE_ID}::pool::vote`,
        arguments: [
          tx.object(pool.address),
          tx.object(balanceManager.address),
          tradeProof,
          tx.pure.id(proposal_id)
        ]
      });
    };
    __privateSet(this, _config, config);
  }
}
_config = new WeakMap();
export {
  GovernanceContract
};
//# sourceMappingURL=governance.js.map
