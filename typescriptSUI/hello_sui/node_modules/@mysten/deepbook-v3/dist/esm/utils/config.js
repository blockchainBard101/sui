var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _coins, _pools;
import { normalizeSuiAddress } from "@mysten/sui/utils";
import { BalanceManagerContract } from "../transactions/balanceManager.js";
import {
  mainnetCoins,
  mainnetPackageIds,
  mainnetPools,
  testnetCoins,
  testnetPackageIds,
  testnetPools
} from "./constants.js";
const FLOAT_SCALAR = 1e9;
const POOL_CREATION_FEE = 1e4 * 1e6;
const MAX_TIMESTAMP = 1844674407370955161n;
const GAS_BUDGET = 0.5 * 5e8;
const DEEP_SCALAR = 1e6;
class DeepBookConfig {
  constructor({
    env,
    address,
    adminCap,
    balanceManagers,
    coins,
    pools
  }) {
    __privateAdd(this, _coins);
    __privateAdd(this, _pools);
    this.address = normalizeSuiAddress(address);
    this.adminCap = adminCap;
    this.balanceManagers = balanceManagers || {};
    if (env === "mainnet") {
      __privateSet(this, _coins, coins || mainnetCoins);
      __privateSet(this, _pools, pools || mainnetPools);
      this.DEEPBOOK_PACKAGE_ID = mainnetPackageIds.DEEPBOOK_PACKAGE_ID;
      this.REGISTRY_ID = mainnetPackageIds.REGISTRY_ID;
      this.DEEP_TREASURY_ID = mainnetPackageIds.DEEP_TREASURY_ID;
    } else {
      __privateSet(this, _coins, coins || testnetCoins);
      __privateSet(this, _pools, pools || testnetPools);
      this.DEEPBOOK_PACKAGE_ID = testnetPackageIds.DEEPBOOK_PACKAGE_ID;
      this.REGISTRY_ID = testnetPackageIds.REGISTRY_ID;
      this.DEEP_TREASURY_ID = testnetPackageIds.DEEP_TREASURY_ID;
    }
    this.balanceManager = new BalanceManagerContract(this);
  }
  // Getters
  getCoin(key) {
    const coin = __privateGet(this, _coins)[key];
    if (!coin) {
      throw new Error(`Coin not found for key: ${key}`);
    }
    return coin;
  }
  getPool(key) {
    const pool = __privateGet(this, _pools)[key];
    if (!pool) {
      throw new Error(`Pool not found for key: ${key}`);
    }
    return pool;
  }
  /**
   * @description Get the balance manager by key
   * @param managerKey Key of the balance manager
   * @returns The BalanceManager object
   */
  getBalanceManager(managerKey) {
    if (!Object.hasOwn(this.balanceManagers, managerKey)) {
      throw new Error(`Balance manager with key ${managerKey} not found.`);
    }
    return this.balanceManagers[managerKey];
  }
}
_coins = new WeakMap();
_pools = new WeakMap();
export {
  DEEP_SCALAR,
  DeepBookConfig,
  FLOAT_SCALAR,
  GAS_BUDGET,
  MAX_TIMESTAMP,
  POOL_CREATION_FEE
};
//# sourceMappingURL=config.js.map
